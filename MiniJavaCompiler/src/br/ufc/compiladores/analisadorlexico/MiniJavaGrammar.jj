/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg1)package br.ufc.compiladores.analisadorlexico;

public class eg1{  public static void main(String args []) throws ParseException  {    eg1 parser = new eg1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (eg1.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        eg1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(eg1)SKIP :{ < #SPACE : " " >| "\r"| "\r\n"| "\n"}TOKEN : /* Operadores e Simbolos */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >
| < NEGATE : "!" >
| < SEMICOLON : ";" >
| < COLON : "," >
| < EQUALS: "=" >
| < OBRACKET : "[" >
| < CBRACKET : "]" >
| < OBRACES : "(" >
| < CBRACES : ")" >}TOKEN : /* Constantes */{  < CONSTANT : (< DIGIT >)+  | < TVALUE > | < FVALUE > >| < #DIGIT : [ "0"-"9" ] >
| < #TVALUE : "true" >
| < #FVALUE : "false" >}

TOKEN : /* Tipos */
{
  	< INT : "int" >
| < BOOLEAN : "boolean" >

}

TOKEN : /* Palavras Reservadas da Linguagem */
{  < THIS: "this" >
| < NEW: "new" >
| < SYSOUT : "System.out.println" >
| < CLASS: "class" >
| < PUBLIC: "public" >
| < STATIC: "static" >
| < VOID: "void" >
| < MAINCLASS: < PUBLIC > < SPACE > < STATIC > < SPACE > < VOID > < SPACE > " main" >

}

TOKEN [IGNORE_CASE] :
{
    < ID: < LETTER > (< LETTER > | < DIGIT >)+ >
| < #LETTER : ["a" - "z"] >

}
int one_line() :{}{  sum() < SEMICOLON >  {    return 0;  }| < SEMICOLON >  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| < OBRACES > sum() < CBRACES >}
