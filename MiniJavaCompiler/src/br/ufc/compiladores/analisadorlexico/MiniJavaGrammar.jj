/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(eg1)package br.ufc.compiladores.analisadorlexico;

public class eg1{  public static void main(String args []) throws ParseException  {    eg1 parser = new eg1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (eg1.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        eg1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(eg1)SKIP :{  " "| "\r"| "\r\n"| "\n"}TOKEN : /* Operadores e Simbolos */{  < PLUS : "+" >
| < AND : "&&" >
| < LESSTHAN :"<" >
| < MINUS : "-" >
| < MULTIPLY : "*" >| < NOT : "!" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < EQUAL: "=" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LBRACES : "{" >
| < RBRACES : "}" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < ULINE : "_" >}TOKEN : /* Palavras Reservadas */{  < PUBLIC : "public" >| < STATIC : "STATIC" >
| < TRUE : "true" >
| < FALSE : "false" >
| < VOID : "void" >
| < MAIN : "main" >
| < EXTENDS : "extends" >
| < RETURN : "return" >
| < IF : "if" >
| < ELSE: "else" >
| < WHILE: "while" >
| < SYSOUT: "System.out.println" >
| < CLASS: "class" >
| < THIS: "this" >
| < NEW: "new" >
| < LENGTH: "length" >}

TOKEN : /* Tipos */
{
  	< INT : "int" >
| < STRING : "String" >
| < BOOLEAN : "boolean" >

}

TOKEN :
{
  < #LETTERLC : ["a" - "z"] >
| < #LETTERUC : ["A" - "Z"] >
| < DIGIT : ["0" - "9"] >| < ID: < LETTERLC > (< LETTERLC > | < LETTERUC > | < ULINE > | < DIGIT >)+ >

}

int one_line() :
{}
{
  sum() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}
void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < DIGIT >
| "(" sum() ")"
}
